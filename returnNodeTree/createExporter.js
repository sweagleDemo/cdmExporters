var exporterName="returnNodeTree";
var exporterDescription="returns the node subtree from the snapshot";
var exporterManager = new CdmExporterManager();

//create exporter
var exporter = exporterManager.createNewExporter(exporterName,exporterDescription);
var exporterId = exporter.getUniqueValue();
​
//create exporter version
var script = "(function (logger, primaryDeployable, additionalDeployables, args, output) {\r\n    \/\/Get Snapshot from the primary deployable\r\n    var snapshotId = primaryDeployable.snapshot_id;\r\n    gs.info(\"snapshotId is \" + snapshotId );\r\n    \r\n    \/\/check if a proper nodeName was provided in the input argument. If not, exit with state error\r\n    if (gs.nil(args.nodeName)) { \/\/first check nodeName is not null as you cannot check length or trim a null object\r\n        gs.info(\"!!error: empty nodeName provided\");\r\n        output.errors = [];\r\n        output.state = \"failure\";\r\n        return output;       \r\n    } else { \/\/next check the length of the trimmed value. If 0 it means only spaces were provided as input\r\n        var filterNodeName = args.nodeName.trim(); \/\/trim spaces from input\r\n        if (filterNodeName.length === 0) {         \r\n            gs.info(\"!!error: nodeName only contain spaces\");\r\n            output.errors = [];\r\n            output.state = \"failure\";  \r\n            return output;         \r\n        }\r\n    }\u200B\r\n    \r\n    \/\/internal variables\r\n    var nameFoundCount = 0; \/\/tracks how often the nodeName was found in the snapshot\r\n    \u200B\r\n    \/\/loop through the snapshot datamodel and find the requested nodeName\r\n    var cdmQ = new sn_cmdb_ci_class.CdmQuery().snapshotId(snapshotId).followIncludes(true).decryptPassword(true).useCache(true).query();\u200B\r\n    while (node = cdmQ.next()) {\r\n        if (cdmQ.getValue(\"sys_class_name\") == \"sg_cdm_node_component\" | cdmQ.getValue(\"sys_class_name\") == \"sg_cdm_node_linked\") { \/\/only look for nodes with that name       \r\n            \/\/if the nodeName has been found, run the CdmQuery for only that path and store result in output.result \r\n            if (node.getValue(\"name\") === filterNodeName) {\r\n                nameFoundCount++;\r\n                \/\/this exporter expects a unique nodeName in the snapshot in order to work correctly. If found more than once, exit with error\r\n                if (nameFoundCount > 1) { \r\n                    gs.info(\"!! error: [\" + filterNodeName + \"]\" + \" was found \" + nameFoundCount + \" times\");\r\n                    output.result={};\r\n                    errorMsg=filterNodeName + \" was found multiple times\";\r\n                    output.errors = {\"error\":errorMsg};\r\n                    output.state = \"failure\";  \r\n                    return output; \r\n                }\r\n                var encodedNodePath = cdmQ.getValue(\"node_path\"); \/\/this returns the encoded path which can be used in CdmQuery to get the subtree for that path\r\n                \/\/nodePath = sn_cmdb_ci_class.CdmUtil.nodePath(node);\r\n                gs.info(\"filterNodeName \" + cdmQ.getValue(\"name\") + \" found on encoded path \" + encodedNodePath);\r\n                \r\n                \/\/TODO : the next call does NOT work when the nodeName is both an overwrite and an include --> check how to solve this !!\u200B\r\n                output.result = new sn_cmdb_ci_class.CdmQuery().snapshotId(snapshotId).encodedPath(encodedNodePath).decryptPassword(true).followIncludes(true).substituteVariable(true).useCache(true).query().getTree(true);\r\n                gs.info(JSON.stringify(output.result));\r\n            }\r\n        }\r\n    }\u200B\r\n\r\n    \/\/in case the nodeName was not found set the result to an empty JSON and set the state to error.\r\n    if (typeof output.result === \'undefined\') {\r\n        output.state=\"error\";\r\n        output.result = {}; \/\/set empty object for output.result\r\n        errorMsg=filterNodeName + \" was not found in the snapshot\";\r\n        output.errors = {\"error\":errorMsg};\r\n        return output;\r\n    }\u200B\r\n\r\n    \/\/in case the nodeName was found once, return a normal response.\r\n    output.errors = [];\r\n    output.state = \"success\";\r\n    return output;\r\n})(logger, primaryDeployable, additionalDeployables, args, output);\r\n";
var exporterVersion = exporterManager.createExporterVersion(exporterId, "info", "description", "", script);
var exporterVersionId = exporterVersion.getUniqueValue();
​
//create exporter argument
var exporterArgument = exporterManager.createExporterArgument(exporterVersionId, "nodeName", null, false);

//publish exporter
exporterManager.publishExporterVersion(exporterVersionId);