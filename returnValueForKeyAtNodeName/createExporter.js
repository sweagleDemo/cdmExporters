var exporterName="returnValueForKeyAtNodeName";
var exporterDescription="returns a value for a unique keyName at a specific nodeName in the snapshot";
var exporterManager = new CdmExporterManager();

//create exporter
var exporter = exporterManager.createNewExporter(exporterName,exporterDescription);
var exporterId = exporter.getUniqueValue();
​
//create exporter version
var script = " \/**\r\n    creator     Benny Van de Sompele, ServiceNow    \r\n **\/\r\n \r\n (function (logger, primaryDeployable, additionalDeployables, args, output) {\r\n   var snapshotId = primaryDeployable.snapshot_id;\r\n    \/\/gs.info(\"snapshotId is \" + snapshotId );\r\n    \r\n    \/\/check if a proper keyName was provided in the input argument. If not, exit with state error\r\n    if (gs.nil(args.keyName) || gs.nil(args.nodeName)) { \/\/first check if any arg value is not null as you cannot check length or trim a null object\r\n        gs.info(\"!!error: empty argument value: keyName [\" + args.keyName + \"]\");\r\n        output.errors = [];\r\n        output.state = \"failure\";\r\n        return output;       \r\n    } else { \/\/next check the length of the trimmed value. If 0 it means only spaces were provided as input\r\n        var filterKeyName = args.keyName.trim(); \/\/trim spaces from input\r\n        var filterNodeName = args.nodeName.trim();\r\n        gs.info(\"nodeName value is \" + filterNodeName + \" for keyName \" + filterKeyName);\r\n        if (filterKeyName.length === 0 || filterNodeName.length === 0) {         \r\n            output.result={};\r\n            if (filterKeyName.length === 0) {errorMsg=\"provided keyName argument is empty or contains only spaces - check input values \"};\r\n            if (filterNodeName.length === 0) {errorMsg+=\"provided nodeName argument is empty or contains only spaces - check input values \"};\r\n            output.errors = {\"error\":errorMsg};\r\n            output.state = \"failure\";  \r\n            gs.info(JSON.stringify(output.errors));\r\n            return output;         \r\n        }\r\n      }\u200B\r\n\r\n    \/\/internal variables to tracks how often the object was found in the snapshot\r\n    var keyFoundCount = 0; \r\n    var nodeFoundCount = 0; \r\n    \u200B\r\n    \/\/loop through the snapshot datamodel and find the requested nodeName\r\n    var cdmQ = new sn_cmdb_ci_class.CdmQuery().snapshotId(snapshotId).followIncludes(true).decryptPassword(true).useCache(true).query();\u200B\r\n    while (node = cdmQ.next()) {\r\n        if (cdmQ.getValue(\"sys_class_name\") != \"sg_cdm_node_cdi\" ) { \/\/look for any type of node except CDIs       \r\n            if (node.getValue(\"name\") === filterNodeName) {\r\n              nodeFoundCount++;\r\n              var encodedNodePath = sn_cmdb_ci_class.CdmUtil.getNodePath(node);\r\n              gs.info(\"filterNodeName \" + cdmQ.getValue(\"name\") + \" found on path \" + encodedNodePath);\r\n              \r\n              \/\/if the nodeName has been found, run the CdmQuery for only that path and check if we find the keyName \r\n              var cdmQnode = new sn_cmdb_ci_class.CdmQuery().snapshotId(snapshotId).encodedPath(encodedNodePath).followIncludes(true).decryptPassword(true).useCache(true).query();\u200B\r\n              \r\n              while (key = cdmQnode.next()) {\r\n                if (cdmQnode.getValue(\"sys_class_name\") == \"sg_cdm_node_cdi\" && cdmQnode.getValue(\"name\") == filterKeyName) { \/\/only compare the keyName for object with the CDI class name\r\n                  \/\/gs.info(\"scanning \" + cdmQnode.getValue(\"name\") + \" with class \" + cdmQnode.getValue(\"sys_class_name\"));\r\n                  \/\/this exporter expects a unique keyName in the snapshot in order to work correctly. If found more than once, exit with error\r\n                  if (keyFoundCount == 0) { \r\n                      keyFoundCount++;\r\n                      var keyValue = sn_cmdb_ci_class.CdmUtil.getEffectiveValue(key);\r\n                      output.result={\"value\":keyValue};\r\n                      output.errors = {};\r\n                      output.state = \"success\";  \r\n                      \/\/gs.info(JSON.stringify(output.result));\r\n                  } else {\r\n                      output.result={};\r\n                      errorMsg=filterKeyName + \" was found more than once at or within the node \" + filterNodeName;\r\n                      output.errors = {\"error\":errorMsg};\r\n                      output.state = \"failure\";  \r\n                      gs.info(JSON.stringify(output.errors));\r\n                      return output; \r\n                  }\r\n                }\r\n              }\r\n            }\r\n        }\u200B\r\n    }\r\n    \/\/in case the keyName was not found set the result to an empty JSON and set the state to failure.\r\n    gs.info(\"nodes found \" + nodeFoundCount);\r\n    if (nodeFoundCount === 0) {\r\n        output.state=\"failure\";\r\n        output.result = {}; \/\/set empty object for output.result\r\n        errorMsg=\"provided nodeName [\"+filterNodeName + \"] was not found in the snapshot\";\r\n        output.errors = {\"error\":errorMsg};\r\n        gs.info(JSON.stringify(output.errors));\r\n        return output;\r\n    }\u200B\r\n\r\n    if (keyFoundCount === 0) {\r\n        output.state=\"failure\";\r\n        output.result = {}; \/\/set empty object for output.result\r\n        errorMsg=\"provided keyName [\" + filterKeyName + \"] was not found at or within nodeName [\" + filterNodeName + \"] in the snapshot\";\r\n        output.errors = {\"error\":errorMsg};\r\n        gs.info(JSON.stringify(output.errors));\r\n        return output;\r\n    }\r\n\r\n    \/\/in case the keyName was found once, return a normal response.\r\n   return output;\r\n })(logger, primaryDeployable, additionalDeployables, args, output);";
var exporterVersion = exporterManager.createExporterVersion(exporterId, "info", "description", "", script);
var exporterVersionId = exporterVersion.getUniqueValue();
​
//create exporter argument
var exporterArgument = exporterManager.createExporterArgument(exporterVersionId, "keyName", null, true);
var exporterArgument = exporterManager.createExporterArgument(exporterVersionId, "nodeName", null, true);

//publish exporter
exporterManager.publishExporterVersion(exporterVersionId);